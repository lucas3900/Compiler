interface Actions {
	void speak(string input);
	bool alive();
	void die();
}

interface Furries {
	void shed();
	double get_amount_of_fur();
}


class Animal {
	bool is_alive;
	int age;
	double num_fur;
	string name;
	
	void set(int age, string name) {
		this.age = age;
		this.name = name;
		is_alive = true;
		num_fur = 40.0;
		
	}

	int getAge() {
		return age;
	}

	string getName() {
		return name;
	}
}

class Dog extends Animal implements Actions, Furries {
	void speak(string input) {
		Print("Woof");
		Print(input);
	}

	bool alive() {
		return is_alive;
	}

	void die() {
		Print("woof I'm dead :(");
		is_alive = false;
	}

	string get_stick() {
		return "---------------";
	}

	void shed() {
		Print("I'm a dog named ", name,", shedding dog fur");
		num_fur = num_fur - 2.3;
	}
	
	double get_amount_of_fur() {
		return num_fur;
	}
}

class Cat extends Animal implements Actions {
	int num_lives;
	void set_lives() {
		num_lives = 9;
	}

	void speak(string input) {
		Print("Meow");
		Print(input);
	}

	bool alive() {
		return is_alive;
	}

	void die() {
		if (num_lives == 0) {
			Print("fine I'll die");
			is_alive = false;
		} else {
			num_lives = num_lives - 1;
			Print("I'm a cat, I have ", num_lives, " lives left");
		}
	}
	
	void reallyKillCat() {
		while (alive())
			this.die();
	}

	void shed() {
		Print("I'm a cat named ", name, ", shedding cat fur");
		num_fur = num_fur - 1.92;
	}
	
	
	double get_amount_of_fur() {
		if (num_fur <= 35.1)
			Print("I'm GOING BALD");
		return num_fur;
	}


}


class Human extends Animal implements Actions {
	Cat[] cats;
	Dog[] dogs; 


	void speak(string input) {
		Print("I'm a human I say words");
		Print(input);
	}

	bool alive() {
		return is_alive;
	}

	void die() {
		Print("Ow, I am a dead hooman");
		is_alive = false;
	}

	Cat[] getCats() {
		return cats;
	}

	Dog[] getDogs() {
		return dogs;
	}

	void setAnimals() {
		cats = NewArray(2, Cat);
		cats[0]  = New(Cat);
		cats[0].set(3, "Mittens");
		cats[1]  = New(Cat);
		cats[1].set(1, "Mittens2");
		
		dogs = NewArray(1, Dog);	
		dogs[0] = New(Dog);
		dogs[0].set(6, "dogmittens");
	}

	void compareAnimals(Animal a, Animal b) {
		string a_name; string b_name;
		int a_age; int b_age;	
		a_name = a.getName(); b_name = b.getName();
		a_age = a.getAge(); b_age = b.getAge();	
		Print(a_name, " is ", a_age, " years old");
		Print(b_name, " is ", b_age, " years old");
		if (a_age > b_age)
			Print(a_name, "is older than ", b_name);
		else
			Print(b_name, "is older than ", a_name);
	}
}

int fib(int n) {
	if (n == 1 || n == 2 && n > 0) return 1; 
	else return fib(n-1) + fib(n-2);
}

int calc_fact(int n) {
	if (n == 1) {
		return n;
	}
		return calc_fact(n-1) * n;
}

void main() {
	Human blake;
	Furries furball;
	int x;
	int z;
	int a;
	int b;
	string yesorno;
	Cat kitty;
	Dog blakesDog;
	double[][] my_doubles;

	blakesDog = New(Dog)	;
	kitty = New(Cat);
	blake = New(Human);
	blake.set(22, "Blake");
	kitty.set(4, "Mr. Cat");
	kitty.set_lives();
	kitty.reallyKillCat();

	for (x = 0; x < 5; x = x + 1)
		kitty.shed(); 

	blake.setAnimals();
	Print(blake.getCats()[1].getAge());
	blakesDog = blake.getDogs()[0];
	blakesDog.shed();
	Print(blakesDog.get_stick());
	
	furball = blakesDog;
	furball.shed();
	
	blakesDog.die();
	Print(blake.getDogs()[0].alive());

	blake.compareAnimals(kitty, blake.getCats()[0]);
	Print("Do you want to run Fib? 1 for yes 0 for no");
	z = ReadInteger();
	if (z == 1) 
		for (x = 1; x < 20; x = x + 1) {
			Print("Fib for ", x, ": ", fib(x));
		}
	else 
		Print("Fine no fib for you");

		
	Print("Do you want to run Factorial? 'yes' or 'no'");
	yesorno = ReadLine();
	if (yesorno == "yes") 	
		for (x = 1; x < 10; x = x + 1) {
			Print("Factorial for ", x, ": ", calc_fact(x));
		}
	else {
		if (z == 0 && yesorno == "no")
			Print("NO FIB AND NO FACT???");
		else {
			Print("More of Fib person I see...");
		}

	
	}

	my_doubles = NewArray(3, double[]);
	
	for (a = 0; a < 3;){
		my_doubles[a] = NewArray(2, double);
		for (b = 0; b < 2;b = b + 1)
			my_doubles[a][b] = 1.6;
		a = a + 1; 
	}
	my_doubles[2][1] = 3.1415;

	for (a = 0; a < 3; a = a + 1)
		Print(my_doubles[a][0], " ", my_doubles[a][1]);
	
}
